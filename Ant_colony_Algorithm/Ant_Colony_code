#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Feb  1 18:41:42 2020



@author: abhishekhegde
"""





import numpy as np
import random
from random import randint
import copy
import pandas as pd
x = pd.read_csv('u250_00.csv',header=None)

weight = np.array(x)
ant_num = 1
capacity = 150
beta = 2
rou = 0.95
iteration = 1
n=len(weight)



#############   Define min tau  ################################
min_tau = 1/ (1 - 0.95)



#############      initialisation  #################################



pheromine_mat = np.ndarray(shape = (len(weight),len(weight)))
for i in range(len(weight)):
    for j in range(i+1,len(weight)):
            pheromine_mat[i,j] = min_tau
#            print(pheromine_mat[i,j])

############# define ant properties ############################
#
class ant_class:


   # ANT LIST , FITNESS , PBEST , bins
    def fitness_func(self):
        sum = 0
        for i in range(len(self.items)):
            sum = sum + (np.sum(weight[self.items[i]])/ capacity) ** 2
            self.Fitness = sum/len(self.items)





    def weight(self):
        self.bin_w =[]
        for i in range(len(self.items)):
            temp =[weight[x] for x in self.items[i]]
            self.bin_w.append(np.sum(temp))


############### main ###########################################
ant = ant_class()
w = np.array(weight)
time =0
Gbest = 0;
while(time < iteration):
    Pbest = 0;
    for i in range(ant_num):
        rand_post = random.randint(0,len(weight)-1)
        unvisit_wt = list(range(len(weight)))

        ###### Ant ######
        ant.items = [[rand_post]]
        ant.weight()

        #print(ant.bin_w)
        bin_count = 0
        unvisit_wt.remove(rand_post)
        for uv_id in range(len(weight)-1):
            remaining = capacity - ant.bin_w[bin_count]
            subspace = [unvisit_wt[i] for i in range(len(unvisit_wt)) if (weight[unvisit_wt[i]] < remaining)]
            if(len(subspace) == 0):
                bin_count = bin_count+1
                ant.items.append([])
                remaining = capacity
                subspace = [unvisit_wt[i] for i in range(len(unvisit_wt)) if (weight[unvisit_wt[i]] < remaining)]
            num_sum = []
            denom_sum = 0
            for sub_i in range(len(subspace)):
                temp_num_sum = 0
                if(len(ant.items[bin_count]) != 0):
                    for j in (ant.items[bin_count]):
                        temp = [subspace[sub_i],j]
                        temp.sort()
                        temp_num_sum = temp_num_sum + pheromine_mat[temp[0],temp[1]]
                    num_sum.append((temp_num_sum/len(ant.items[bin_count]))*((weight[subspace[sub_i]]**beta)))

                    denom_sum = denom_sum + num_sum[sub_i]
                else:
                    num_sum.append(1*(weight[subspace[sub_i]]**beta))
                    denom_sum = denom_sum + num_sum[sub_i]
            prob_fill = list(map(lambda x: x/denom_sum,num_sum))
#            print(prob_fill)
            fill_index = np.argmax(prob_fill)
            ant.items[bin_count].append(subspace[fill_index])
            ant.weight()
            unvisit_wt.remove(subspace[fill_index])
    #    print(ant.items)
        ant.fitness_func()
        if(ant.Fitness > Pbest):
           # print(time)
            Pbest = copy.deepcopy(ant.Fitness)
           # print(Pbest)
            Pbest_items = copy.deepcopy(ant.items)
    #        print(ant.items)
    if(Pbest>Gbest):
#        print("Gbest" , time)
        Gbest = copy.deepcopy(Pbest)
        Gbest_items = copy.deepcopy(Pbest_items)



############################## Updation Pheromine ################################################
#
    for i in range(len(weight)):
        for j in range(i+1,len(weight)):
            t = 0
            wt_comb = [weight[i],weight[j]]
            for k in range(len(Pbest_items)):
              # print(np.intersect1d(wt_comb,weight[Pbest_items[k]]))
               intersection_set = np.intersect1d(wt_comb,weight[Pbest_items[k]])
#               print(intersection_set)
               if(len(intersection_set) ==2):
                   t = t + 1
            pheromine_mat[i,j] = min((rou * pheromine_mat[i,j]) + (t * Pbest),(  (1/(1-rou))*(1-(Pbest**(1/9))) ) /((9/2)-1)*(Pbest**(1/9)) )
           # print(pheromine_mat[i,j])
    time = time + 1
#print(Pbest,Gbest)
#        
